{"version":3,"file":"static/js/465.e6832d30.chunk.js","mappings":"qPAEaA,EAAOC,EAAAA,EAAAA,GAAH,8HASJC,EAAWD,EAAAA,EAAAA,GAAH,2DAIRE,EAAWF,EAAAA,EAAAA,IAAH,oG,+JCbRG,EAAOH,EAAAA,EAAAA,KAAH,yJASJI,EAAQJ,EAAAA,EAAAA,MAAH,oPAaLK,EAAeL,EAAAA,EAAAA,OAAH,6SAgBZM,EAAQN,EAAAA,EAAAA,KAAH,wH,8JCrCLO,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1B,OACE,UAAC,KAAD,CAAMA,SAAUA,EAAhB,WACE,SAAC,KAAD,CAAOC,KAAK,OAAOC,KAAK,QAAQC,WAAS,EAACC,aAAa,SACvD,SAAC,KAAD,CAAcH,KAAK,SAAnB,UACE,UAAC,KAAD,qBAEE,SAAC,MAAD,CAAUI,MAAO,CAAEC,MAAO,GAAIC,OAAQ,aAK/C,E,2DCJYC,GATOhB,EAAAA,EAAAA,GAAH,8HASGA,EAAAA,EAAAA,GAAH,4DAIJiB,EAAQjB,EAAAA,EAAAA,IAAH,uNAWLkB,EAAQlB,EAAAA,EAAAA,EAAH,iICpBLmB,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,SAAC,KAAD,UACGF,EAAOG,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACxB,OACE,SAACV,EAAD,WACE,UAAC,KAAD,CACEW,GAAE,UAAKH,GACPI,MAAO,CAAEC,KAAMR,EAASS,SAAWT,EAASU,QAF9C,WAIE,0BACE,SAACd,EAAD,CACEe,IACEN,EACI,mCAAqCA,EACrCO,EAENC,IAAI,aAGR,SAAChB,EAAD,UAAQO,QAfDD,EAmBd,KAGN,E,wCCWD,EArCe,WAAO,IAAD,EACnB,GAA8BW,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAK,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GA0B3C,OAlBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,WAAqBF,GAArB,iGAE0BG,EAAAA,EAAAA,IAAqBH,EAAMI,QAFrD,YAEUT,EAFV,QAGgBU,OAHhB,uBAIMT,GAAW,OAAID,IAJrB,0BAOIW,EAAAA,GAAAA,MAAY,sCAPhB,kDASIA,EAAAA,GAAAA,MAAA,MATJ,0DADc,wBAaVN,GAbW,SAAD,2BAcZO,CAAMP,EAET,GAAE,CAACA,KAGF,6BACE,SAAClC,EAAD,CAAWC,SA1BE,SAAAyC,GACfA,EAAIC,iBACJV,EAAgB,CAAEC,MAAOQ,EAAIE,OAAOV,MAAMW,QAC1CH,EAAIE,OAAOE,OACZ,KAuBG,SAAClC,EAAD,CAAYC,OAAQgB,MAGzB,C","sources":["components/CastList/CastList.styled.js","components/SearchBar/SearchBar.styled.js","components/SearchBar/Searchbar.jsx","components/SearchList/SearchList.styled.js","components/SearchList/SearchList.jsx","pages/Movies.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 16px;\n`;\n\nexport const CastItem = styled.li`\n  width: calc((100% - 80px) / 5);\n`;\n\nexport const CastInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  color: #161616;\n`;\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  overflow: hidden;\n  margin: 0 auto 12px auto;\n`;\n\nexport const Input = styled.input`\n  display: inline-block;\n  width: 100%;\n  font-size: 20px;\n  border: 1px solid #dbdbdb;\n  border-radius: 20px;\n  outline: none;\n  padding-left: 18px;\n  padding-right: 4px;\n  height: 40px;\n  margin-right: 12px;\n`;\n\nexport const SearchButton = styled.button`\n  display: inline-block;\n  height: 40px;\n  padding-left: 10px;\n  padding-right: 10px;\n  border: 0;\n  border-radius: 20px;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const Label = styled.span`\n  display: flex;\n  justify-content: center;\n  gap: 8px;\n  font: inherit;\n  font-size: 20px;\n`;\n","import { BsSearch } from 'react-icons/bs';\nimport { Input, Form, Label, SearchButton } from './SearchBar.styled';\n\nexport const SearchBar = ({ onSubmit }) => {\n  return (\n    <Form onSubmit={onSubmit}>\n      <Input type=\"text\" name=\"query\" autoFocus autoComplete=\"off\" />\n      <SearchButton type=\"submit\">\n        <Label>\n          Search\n          <BsSearch style={{ width: 20, height: 20 }} />\n        </Label>\n      </SearchButton>\n    </Form>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 16px;\n`;\n\nexport const Item = styled.li`\n  width: calc((100% - 32px) / 3);\n`;\n\nexport const Image = styled.img`\n  margin-bottom: 6px;\n  width: 100%;\n  object-fit: cover;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    transform: scale(1.03);\n    cursor: pointer;\n  }\n`;\n\nexport const Title = styled.p`\n  color: #161616;\n  font-size: 18px;\n  line-height: 24px;\n  font-style: normal;\n  font-weight: 500;\n`;\n\n","import { List } from 'components/CastList/CastList.styled';\nimport placeholder from '../../Images/placeholder.webp';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Item, Title, Image } from './SearchList.styled';\nimport PropTypes from 'prop-types';\n\nexport const SearchList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <List>\n      {movies.map(({ id, title, poster_path }) => {\n        return (\n          <Item key={id}>\n            <Link\n              to={`${id}`}\n              state={{ from: location.pathname + location.search }}\n            >\n              <div>\n                <Image\n                  src={\n                    poster_path\n                      ? 'https://image.tmdb.org/t/p/w500/' + poster_path\n                      : placeholder\n                  }\n                  alt=\"title\"\n                />\n              </div>\n              <Title>{title}</Title>\n            </Link>\n          </Item>\n        );\n      })}\n    </List>\n  );\n};\n\nSearchList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string,\n    }).isRequired\n  ).isRequired,\n};\n","import { SearchBar } from 'components/SearchBar/Searchbar';\nimport { SearchList } from 'components/SearchList/SearchList';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { fetchMoviesByKeyWord } from 'services/fetch-app';\n\nconst Movies = () => {\n  const [results, setResults] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  const onSubmit = evt => {\n    evt.preventDefault();\n    setSearchParams({ query: evt.target.query.value });\n    evt.target.reset();\n  };\n\n  useEffect(() => {\n    async function fetch(query) {\n      try {\n        const results = await fetchMoviesByKeyWord(query.trim());\n        if (results.length) {\n          setResults([...results]);\n          return;\n        }\n        toast.error('No movies found. Try one more time');\n      } catch (error) {\n        toast.error(error);\n      }\n    }\n    if (query) {\n      fetch(query);\n    }\n  }, [query]);\n\n  return (\n    <main>\n      <SearchBar onSubmit={onSubmit} />\n      <SearchList movies={results} />\n    </main>\n  );\n};\n\nexport default Movies;\n"],"names":["List","styled","CastItem","CastInfo","Form","Input","SearchButton","Label","SearchBar","onSubmit","type","name","autoFocus","autoComplete","style","width","height","Item","Image","Title","SearchList","movies","location","useLocation","map","id","title","poster_path","to","state","from","pathname","search","src","placeholder","alt","useState","results","setResults","useSearchParams","searchParams","setSearchParams","query","get","useEffect","fetchMoviesByKeyWord","trim","length","toast","fetch","evt","preventDefault","target","value","reset"],"sourceRoot":""}